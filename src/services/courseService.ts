
import { db } from '@/lib/firebase';
import { ref, get, set, update, remove, push } from 'firebase/database';
import type { Course } from '@/lib/types';

// Simulate network delay - no longer needed with real DB calls
// const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

const coursesRef = ref(db, 'courses');

/**
 * Fetches all courses from Firebase Realtime Database.
 */
export async function getCourses(): Promise<Course[]> {
  try {
    const snapshot = await get(coursesRef);
    if (snapshot.exists()) {
      const coursesData = snapshot.val();
      // Convert the object of courses into an array
      return Object.keys(coursesData).map(key => ({
        ...coursesData[key],
        id: key,
      }));
    }
    return [];
  } catch (error) {
    console.error("Error fetching courses: ", error);
    return [];
  }
}

/**
 * Fetches a single course by its ID from Firebase.
 */
export async function getCourseById(id: string): Promise<Course | undefined> {
  try {
    const courseRef = ref(db, `courses/${id}`);
    const snapshot = await get(courseRef);
    if (snapshot.exists()) {
      return { ...snapshot.val(), id };
    }
    return undefined;
  } catch (error) {
    console.error(`Error fetching course with id ${id}: `, error);
    return undefined;
  }
}

/**
 * Creates a new course in Firebase.
 * The ID will be auto-generated by Firebase (push key).
 */
export async function createCourse(newCourseData: Omit<Course, 'id'>): Promise<Course> {
   try {
    const newCourseRef = push(coursesRef);
    const newCourse = {
        ...newCourseData,
        id: newCourseRef.key!
    }
    await set(newCourseRef, newCourseData);
    return newCourse;
  } catch (error) {
    console.error("Error creating course: ", error);
    throw new Error("Could not create course.");
  }
}

/**
 * Updates an existing course in Firebase.
 */
export async function updateCourse(id: string, updatedData: Partial<Course>): Promise<Course | null> {
  try {
    const courseRef = ref(db, `courses/${id}`);
    await update(courseRef, updatedData);
    return await getCourseById(id) || null;
  } catch (error) {
    console.error(`Error updating course with id ${id}: `, error);
    return null;
  }
}

/**
 * Deletes a course from Firebase.
 */
export async function deleteCourse(id: string): Promise<boolean> {
  try {
    const courseRef = ref(db, `courses/${id}`);
    await remove(courseRef);
    return true;
  } catch (error) {
    console.error(`Error deleting course with id ${id}: `, error);
    return false;
  }
}
